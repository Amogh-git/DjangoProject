from translation import variables
#import nltk
import os
from nltk.parse.stanford import StanfordDependencyParser # to import dependency parser
os.environ['JAVA_HOME'] = "C:\Program Files\Java\jdk1.8.0_231"
path_to_jar = 'C:\\Projects\\stanford-parser-full-2017-06-09\\stanford-parser.jar'
path_to_models_jar = 'C:\\Projects\\stanford-parser-full-2017-06-09\\stanford-parser-3.8.0-models.jar'
dependency_parser = StanfordDependencyParser(path_to_jar=path_to_jar, path_to_models_jar=path_to_models_jar)

result = dependency_parser.raw_parse(variables.sentence) # to find dependecy among tokens
dep = result.__next__()
variables.dependency=list(dep.triples())
#print(list(dep.triples()))

case1=[]

def case_list():
    i=0
    while i<len(variables.english):  # by taking into considering dependency among tokens identify  noun and prnoun cases
        j=0
        flag=0
        while j<len(variables.dependency):
            if variables.dependency[j][2][0]== variables.english[i].lower():
                flag=1
                break
            j=j+1
        if flag==1: 
           if variables.dependency[j][2][1]=='PRP' or variables.dependency[j][2][1]=='PRP$':
               pronoun_case(i,j)
           elif variables.dependency[j][2][1]=='IN' or variables.dependency[j][2][1]=='NN' or variables.dependency[j][2][1]=='NNS' or variables.dependency[j][2][1]=='NNP' or variables.dependency[j][2][1]=='NNPS':
               noun_case(i,j)
           elif(variables.dependency[j][2][1]=="MD" or variables.dependency[j][2][1]=="VB" or variables.dependency[j][2][1]=="VBD" or variables.dependency[j][2][1]=="VBG" or variables.dependency[j][2][1]=="VBN" or variables.dependency[j][2][1]=="VBP" or variables.dependency[j][2][1]=="VBZ"):
               if(variables.dependency[j][1]=='aux'):
                   case1.append('aux')
               else:
                   case1.append(-1) 
           else:
               case1.append(-1)
      
        else:
            case1.append('n')
        i=i+1
   
    i=0       
    while i<len(case1): # to assign case to all dependent tokens of case identified noun and pronoun
        if(case1[i]==-1):
            j=0
            flag=0
            while j<len(variables.dependency):
                if variables.dependency[j][2][0]== variables.english[i].lower():
                    flag=1
                    break
                j=j+1
            if flag==1: 
                    if variables.dependency[j][0][1]=='PRP' or variables.dependency[j][0][1]=='PRP$'or variables.dependency[j][0][1]=='NN' or variables.dependency[j][0][1]=='NNS' or variables.dependency[j][0][1]=='NNP' or variables.dependency[j][0][1]=='NNPS':
                        k=0
                        while variables.dependency[j][0][0]!=variables.english[k]:
                            k=k+1
                        case1[i]=case1[k]
        i=i+1

    print(case1)


    i=0
# to rearrange cases identified with respect to sequence of tokens generated by token rearrangement
#input : sentence in original form, rearranged sentence, case1 array
    while i<len(variables.rearrange): 
        j=0
        while variables.rearrange[i]!=variables.english[j]: 
            j=j+1
        variables.case.append(case1[j])
        i=i+1

  

def noun_case(i,j): # to case of nouns
    if variables.dependency[j][1]=='nsubj' or variables.dependency[j][1]=='nsubjpass':
        case1.append('n')
    elif variables.dependency[j][1]=='dobj':#accusive
        case1.append('a')
    elif variables.dependency[j][1]=='iobj':#dative
        case1.append('d')
    elif variables.dependency[j][1]=='nmod:poss':#genetive
        case1.append('g')
    elif variables.dependency[j][1]=='nmod':##preposition
        case1.append('p')
    elif variables.dependency[j][1]=='case':#preposition
        case1.append('p')
    else:
        case1.append(-1)
    
def pronoun_case(i,j): # to identify case of pronouns
    if variables.dependency[j][1]=='nsubj' or variables.dependency[j][1]=='nsubjpass':
        case1.append('n')
    elif variables.dependency[j][1]=='nmod:poss':
        case1.append('g')
    elif variables.dependency[j][1]=='nmod':
        case1.append('p')
    else:
        case1.append('a')
        
'''        
def aux_case(i,j): # to identify case of pronouns
    if variables.dependency[j][1]=='aux':
        case1.append('aux')
   
'''
#print(variables.case)
#print(variables.rearrange)